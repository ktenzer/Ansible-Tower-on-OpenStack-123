- name: Setup ssh authorization for user {{ ss_user }} to Tower nodes
  shell: ssh-copy-id {{ hostvars[item]['ansible_eth0']['ipv4']['address'] }} 
  with_items: "{{ groups['nodes'] }}"
  when: node_count > 0

- name: Setup OpenShift inventory file
  template:
    src: templates/tower-inventory.j2
    dest: /home/{{ ssh_user }}/tower-inventory
    owner: root
    group: root
    mode: 0755

- name: Configure nodes dynamically
  lineinfile: 
    dest: /home/{{ ssh_user }}/tower-inventory
    line: "{{ item }}.{{ domain_name }}"
    insertafter: '^#?\[tower\]'
  with_items: "{{ groups['nodes'] }}"
  when: node_count != 0

- name: Configure database node
  lineinfile: 
    dest: /home/{{ ssh_user }}/tower-inventory
    line: "{{ towerdb_hostname }}.{{ domain_name }}"
    insertafter: '^#?\[database\]'
  when: node_count != 0

- name: Configure database connection
  lineinfile: 
    dest: /home/{{ ssh_user }}/tower-inventory
    line: "{{ item }}"
    insertafter: '^#?admin_password'
  with_items:
    - pg_host='{{ towerdb_hostname }}.{{ domain_name }}'
    - pg_port='5432'
  when: node_count != 0

- name: Configure to use short hostname for rabbitmq
  lineinfile: 
    dest: /home/{{ ssh_user }}/tower-inventory
    line: 'rabbitmq_use_long_name=true'
    insertafter: '^#?rabbitmq_cookie'
  when: node_count != 0

- name: Configure single node
  lineinfile: 
    dest: /home/{{ ssh_user }}/tower-inventory
    line: "localhost ansible_connection=local"
    insertafter: '^#?\[tower\]'
  when: node_count == 0

- name: Configure single node database connection
  lineinfile: 
    dest: /home/{{ ssh_user }}/tower-inventory
    line: "{{ item }}"
    insertafter: '^#?admin_password'
  with_items:
    - pg_host=''
    - pg_port=''
  when: node_count == 0

- name: Configure to use short hostname for rabbitmq
  lineinfile: 
    dest: /home/{{ ssh_user }}/tower-inventory
    line: 'rabbitmq_use_long_name=false'
    insertafter: '^#?rabbitmq_cookie'
  when: node_count == 0

- name: Check if Ansible Tower install bundle exists
  stat:
    path: /home/{{ ssh_user }}/ansible-tower-setup-bundle-latest.el7.tar
  register: tower_bundle

- name: Download Ansible Tower Bundle
  get_url:
    url: https://releases.ansible.com/ansible-tower/setup-bundle/ansible-tower-setup-bundle-latest.el7.tar.gz
    dest: /home/{{ ssh_user }}/ansible-tower-setup-bundle-latest.el7.tar.gz
    force_basic_auth: yes
    validate_certs: no

- name: Extract Ansible Tower tarball
  unarchive:
    src: /home/{{ ssh_user }}/ansible-tower-setup-bundle-latest.el7.tar.gz
    dest: /home/{{ ssh_user }}
    remote_src: yes
  when: tower_bundle.stat.exists == False

- name: Find Ansible Tower Install Directory
  find:
    paths: /home/{{ ssh_user }}
    patterns: "*ansible-tower-setup*"
    file_type: directory
  register: dir_output

- debug:
    msg: "Ansible Install Directory: {{ dir_output.files }}"
  when: debug == True

- name: Install Ansible Tower
  shell: export ANSIBLE_HOST_KEY_CHECKING=False && cd {{ item.path }} && ./setup.sh -i /home/{{ ssh_user }}/tower-inventory
  with_items: "{{ dir_output.files }}"
