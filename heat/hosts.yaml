---
heat_template_version: 2016-10-14

description:
  An instance for a DNS service made up of a single master and a set of
  slave services.
  The instances are created with Heat and then configured with Ansible

parameters:
  tower_pool_https:
    type: string
    description: The tower lbaas pool

  node_count:
    type: number
    description: >
      Number of app nodes to create.
    default: 2

  towerdb_hostname:
    description: >
      The default prefix for towerdb hostname
    type: string
    default: "towerdb"

  node_hostname_prefix:
    description: >
      The default prefix for tower node hostnames
    type: string
    default: "node"

  domain_name:
    description: >
      All VMs will be placed in this domain
    type: string

  # Networks to connect to or create
  external_network:
    type: string
    description: >
      The external network that provides floating IP addresses for the nodes
    constraints:
    - custom_constraint: neutron.network

  service_network:
    description: >
      The name or ID of the internal network
    type: string
    constraints:
    - custom_constraint: neutron.network

  service_subnet:
    description: >
      The name or ID of the internal IPv4 space
    type: string
    constraints:
    - custom_constraint: neutron.subnet

  node_server_group_policies:
    type: comma_delimited_list
    description: >
      List of policies applied on master nodes ServerGroup. By default
      'anti-affinity' policy is used to make sure that each master node
      is deployed on a different host. If you use a small/all-in-one openstack
      environment, you may need to disable this e.g. by passing
      '-P node_server_group_policies=affinity'.
    default: ['anti-affinity']

  image:
    description: >
      The Glance image to use as a base for OpenShift nodes
    type: string
    constraints:
    - custom_constraint: glance.image

  towerdb_flavor:
    description: >
      The name of the OpenStack instance flavor to use for towerdb
    type: string
    default: m1.small
    constraints:
    - custom_constraint: nova.flavor

  node_flavor:
    description: >
      The name of the OpenStack instance flavor to use for Tower nodes
    type: string
    default: m1.medium
    constraints:

  # Access to the VMs
  ssh_user:
    type: string
    description: >
      The SSH user available on all nodes.
    default: cloud-user

  ssh_key_name:
    type: string
    description: Name of the SSH keypair registered with Nova
    constraints:
    - custom_constraint: nova.keypair

resources:

  towerdb:
    type: towerdb.yaml
    properties:
      image: {get_param: image}
      towerdb_flavor: {get_param: towerdb_flavor}
      external_network: {get_param: external_network}
      service_network: {get_param: service_network}
      service_subnet: {get_param: service_subnet}
      security_group: {get_resource: towerdb_security_group}
      hostname: {get_param: towerdb_hostname}
      domain_name: {get_param: domain_name}
      ssh_user: {get_param: ssh_user}
      ssh_key_name: {get_param: ssh_key_name}

  nodes:
    type: nodes.yaml
    properties:
      tower_pool_https: {get_param: tower_pool_https}
      node_count: {get_param: node_count}
      image: {get_param: image}
      node_flavor: {get_param: node_flavor}
      node_server_group_policies: {get_param: node_server_group_policies}
      external_network: {get_param: external_network}
      service_network: {get_param: service_network}
      service_subnet: {get_param: service_subnet}
      security_group: {get_resource: node_security_group}
      hostname_prefix: {get_param: node_hostname_prefix}
      domain_name: {get_param: domain_name}
      ssh_user: {get_param: ssh_user}
      ssh_key_name: {get_param: ssh_key_name}

  towerdb_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
      - protocol: icmp
      - direction: ingress
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
      - direction: ingress
        protocol: tcp
        port_range_min: 80
        port_range_max: 80
        protocol: tcp
        port_range_min: 443
        port_range_max: 443
      - direction: ingress
        protocol: tcp
        port_range_min: 4369
        port_range_max: 4369
      - direction: ingress
        protocol: tcp
        port_range_min: 25672
        port_range_max: 25672
      - direction: ingress
        protocol: tcp
        port_range_min: 15672
        port_range_max: 15672
      - direction: ingress
        protocol: tcp
        port_range_min: 5432
        port_range_max: 5432

  node_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
      - protocol: icmp
      - direction: ingress
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
      - direction: ingress
        protocol: tcp
        port_range_min: 80
        port_range_max: 80
        protocol: tcp
        port_range_min: 443
        port_range_max: 443
      - direction: ingress
        protocol: tcp
        port_range_min: 4369
        port_range_max: 4369
      - direction: ingress
        protocol: tcp
        port_range_min: 25672
        port_range_max: 25672
      - direction: ingress
        protocol: tcp
        port_range_min: 15672
        port_range_max: 15672

outputs:
  towerdb_ip_address:
    value: {get_attr: [towerdb, ip_address]}
  node_entries:
    value: {get_attr: [nodes, entries]}

